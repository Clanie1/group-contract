type ExpenseDto = struct {
  description: str,
  amount: u128,
  currency: str,
};

type Events = enum {
  GroupCreated: u32,
  UserJoined: struct { actor_id, u32 },
  ExpenseAdded: struct { u32, u32 },
  PaymentAdded: struct { u32, u32 },
  Error: str,
};

type IoState = struct {
  groups: vec Group,
};

type Group = struct {
  id: u32,
  name: str,
  members: vec actor_id,
  expenses: vec Expense,
  payments: vec Payment,
};

type Expense = struct {
  id: u32,
  description: str,
  amount: u128,
  currency: str,
  actor_id: actor_id,
};

type Payment = struct {
  id: u32,
  from: actor_id,
  to: actor_id,
  amount: u32,
};

constructor {
  New : ();
};

service Service {
  AddExpense : (group_id: u32, expenseDTO: ExpenseDto) -> Events;
  AddPayment : (group_id: u32, amount: u32, to: actor_id) -> Events;
  CreateGroup : (group_name: str) -> Events;
  JoinGroup : (group_id: u32) -> Events;
  query Query : () -> IoState;
  query QueryActorGroups : () -> vec Group;
  query QueryExpenses : (group_id: u32) -> opt vec Expense;
  query QueryGroup : (groupId: u32) -> Group;
  query QueryGroupMembers : (group_id: u32) -> opt vec actor_id;
};

